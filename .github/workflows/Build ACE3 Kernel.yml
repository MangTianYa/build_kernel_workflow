name: Build  ace3 Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'MangTianYa/android_kernel_oneplus_sm8550'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'lineage-22.1'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: '/vendor/oplus/aston.config'
      AOSP_CLANG_BRANCH:
        description: 'AOSP Clang branch'
        required: true
        default: 'main'
      AOSP_CLANG_VERSION:
        description: 'AOSP Clang version'
        required: true
      USE_CUSTOM_CLANG:
        description: 'Use Custom Clang'
        required: true
        default: false
        type: boolean
      CUSTOM_CLANG_URL:
        description: 'Custom Clang URL'
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      # PERSONAL_TOKEN:
      #   description: 'Personal access token'
      #   required: true
      #   default: ''
      ENABLE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: true
        type: boolean
      ENABLE_KERNELSU_DEBUG:
        description: 'Use KernelSU Debug'
        required: true
        default: false
        type: boolean
      ADD_PATH_UMOUNT:
        description: 'Add `path_umount` for KernelSU'
        required: true
        default: false
        type: boolean

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "AOSP_CLANG_BRANCH=${{ github.event.inputs.AOSP_CLANG_BRANCH }}" >> $GITHUB_ENV
        echo "AOSP_CLANG_VERSION=${{ github.event.inputs.AOSP_CLANG_VERSION }}" >> $GITHUB_ENV
        echo "USE_CUSTOM_CLANG=${{ github.event.inputs.USE_CUSTOM_CLANG }}" >> $GITHUB_ENV
        echo "CUSTOM_CLANG_URL=${{ github.event.inputs.CUSTOM_CLANG_URL }}" >> $GITHUB_ENV
        # echo "PERSONAL_TOKEN=${{ github.event.inputs.PERSONAL_TOKEN }}" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=${{ github.event.inputs.ENABLE_KERNELSU }}" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU_DEBUG=${{ github.event.inputs.ENABLE_KERNELSU_DEBUG }}" >> $GITHUB_ENV
        echo "ADD_PATH_UMOUNT=${{ github.event.inputs.ADD_PATH_UMOUNT }}" >> $GITHUB_ENV

    - name: Setup Build Environment
      run: |
       red='\033[0;31m'
       green='\033[0;32m'
       yellow='\033[0;33m'
       blue='\033[0;34m'
       clear='\033[0m'
       KERNEL_PATH=$PWD
       ARCH=arm64
       ASTON_DEFCONFIG="gki_defconfig vendor/kalama_GKI.config vendor/oplus/kalama_GKI.config vendor/debugfs.config vendor/oplus/aston.config"
       BENZ_DEFCONFIG="gki_defconfig vendor/kalama_GKI.config vendor/oplus/crow_GKI.config vendor/debugfs.config vendor/oplus/benz.config"
       CLANG_PATH=$KERNEL_PATH/.clang
       export PATH=$CLANG_PATH/bin:$PATH
       KernelSU=true
       BUILD_CC="LLVM=1 LLVM_IAS=1"
    - name: Download AOSP Clang Toolchain
      if: env.USE_CUSTOM_CLANG == 'false'
      run: |
           cd $KERNEL_PATH
           git clone https://gitea.com/inferno0230/clang-r547379.git --depth=1 $KERNEL_PATH/.clang

    - name: Python3
      run: |
        sudo apt update
        sudo apt install python3
        sudo apt install python3-dev
        python3 --version

    - name: Download Custom Clang Toolchain
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        wget -q $(curl ${{ env.CUSTOM_CLANG_URL }}) -O clang.tar.gz

    - name: Extract Clang Toolchain
      run: |
        mkdir clang
        tar -C clang/ -zxf clang.tar.gz

    - name: Checkout Kernel
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        submodules: recursive
        path: kernel-source

    - name: Checkout AnyKernel3
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: sakana164/AnyKernel3
        path: kernel-source/AnyKernel3

    - name: Setup KernelSU
      if: env.USE_KERNELSU == 'true'
      run: |
        cd $KERNEL_PATH
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -


    - name: Build Kernel
      run: |
         if [ "$TARGET_DEVICE" == "benz" ]; then
         DEFCONFIG=$BENZ_DEFCONFIG
         else
         DEFCONFIG=$ASTON_DEFCONFIG
         fi
         cd $KERNEL_PATH
         sed -i 's/ -dirty//g' scripts/setlocalversion
         make O=out ARCH=arm64 CC=clang $BUILD_CC $DEFCONFIG savedefconfig
         # Begin compilation
          start=$(date +%s)
          make O=out CC='ccache clang' CXX='ccache clang++' LTO=thin ARCH=arm64 -j`nproc` ${BUILD_CC} 2>&1 | tee error.log
          if [ -f $KERNEL_PATH/out/arch/arm64/boot/Image ]; then
          echo -e "${green}Kernel Compilation successful!, Zipping...${clear}"
          make_anykernel3_zip
          else
          echo -e "${red}Compilation failed!${clear}"
          echo -e "${red}Check error.log for more info!${clear}"
          exit
         fi

    - name: Configuration AnyKernel3
      run: |
           cd $KERNEL_PATH
           git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3
           # Extract the kernel version from the Makefile
           if [ "$DEVICE_CONFIG" == "vendor/oplus/benz.config" ]; then
           zip_name="OPNCE4-v5.15.$(grep "^SUBLEVEL =" Makefile | awk '{print $3}')-$(date +"%Y%m%d-%H%M").zip"
           else
           zip_name="OP12R-v5.15.$(grep "^SUBLEVEL =" Makefile | awk '{print $3}')-$(date +"%Y%m%d-%H%M").zip"
           fi
          cd $KERNEL_PATH/AnyKernel3
           cp $KERNEL_PATH/out/arch/arm64/boot/Image $KERNEL_PATH/AnyKernel3/
           zip -r kernel.zip ./*
           mv kernel.zip $KERNEL_PATH/out
          ln -sf $KERNEL_PATH/out/kernel.zip $KERNEL_PATH/out/${zip_name}
          echo -e "${green}out: ${KERNEL_PATH}/out/${zip_name}${clear}"
          echo -e "${clear}"
         echo -e "${green}Completed in $(($(date +%s) - start)) seconds.${clear}"
         cd $KERNEL_PATH
         git checkout HEAD scripts/setlocalversion
         rm AnyKernel3/Image
         exit


    - name: Upload Kernel
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_SOURCE_BRANCH }}-kernel-${{ env.DEVICE }}${{ env.ENABLED_KERNELSU }}-${{ env.BUILD_TIME }}
        path: |
          kernel-source/AnyKernel3/
          !kernel-source/AnyKernel3/*.git*
          !kernel-source/AnyKernel3/patch
          !kernel-source/AnyKernel3/modules
          !kernel-source/AnyKernel3/ramdisk
        compression-level: 9
